# x-common-args: &common-args

x-restart-policy: &restart_policy
  restart: ${APP_RESTART_POLICY-unless-stopped}

x-service-volumes: &service_volumes
  volumes:
    - source: ${APP_DATA_DIR-.}/data/config
      target: /app/data/config
      type: bind
    - source: ${APP_DATA_DIR-.}/data/public
      target: /app/data/public
      type: bind
    - source: ${APP_DATA_DIR-.}/data/lbstream
      target: /app/data/lbstream
      type: bind
    - source: ${APP_DATA_DIR-.}/data/logs
      target: /app/data/logs
      type: bind

x-service-build: &service_build
  build:
    context: .
    target: app-prod
    ssh:
      default: ${SSH_AUTH_SOCK}

x-common-env: &common_env
  ENV: ${ENV:??}
  TZ: ${TZ-UTC}
  LOG_LEVEL: ${LOG_LEVEL-info}
  # ---
  STARC_SQL_DATABASE: ${STARC_SQL_DATABASE-db}
  # ---
  STARC_QUEUE_REDIS_HOST: ${STARC_QUEUE_REDIS_HOST-redis}
  STARC_QUEUE_REDIS_PORT: ${STARC_QUEUE_REDIS_PORT-6379}
  # ---
  DPROC_AUTH_TOKEN: ${DPROC_AUTH_TOKEN:??}
  # ---
  DS_BOT_TOKEN: ${DS_BOT_TOKEN:??}
  DS_BOT_OWNER: ${DS_BOT_OWNER:??}
  DS_BOT_STAFF: ${DS_BOT_STAFF-}
  # ---
  STARC_WEBAPI_HOSTNAME_WHITELIST: ${STARC_WEBAPI_HOSTNAME_WHITELIST:??}
  STARC_WEBAPI_RATE_LIMIT_MAX: ${STARC_WEBAPI_RATE_LIMIT_MAX-}
  STARC_WEBAPI_RATE_LIMIT_TIME_WINDOW_SEC: ${STARC_WEBAPI_RATE_LIMIT_TIME_WINDOW_SEC-}
  STARC_WEBAPI_TRUST_PROXY: ${STARC_WEBAPI_TRUST_PROXY-}
  STARC_APP_SECRET: ${STARC_APP_SECRET:??}
  # ---
  STARC_BNET_API_CLIENT_ID: ${STARC_BNET_API_CLIENT_ID:??}
  STARC_BNET_API_CLIENT_SECRET: ${STARC_BNET_API_CLIENT_SECRET:??}

services:
  redis:
    <<: [ *restart_policy ]
    build:
      context: ./docker/redis
    container_name: ${COMPOSE_PROJECT_NAME:??}-redis
    networks:
      default:
        aliases:
          - "redis"
    volumes:
      - type: bind
        source: ${APP_DATA_DIR-.}/data/redis
        target: /data

  mariadb:
    <<: [ *restart_policy ]
    build:
      context: ./docker/mariadb
    container_name: ${COMPOSE_PROJECT_NAME:??}-mariadb
    command:
      - mariadbd
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"
      - "--innodb-buffer-pool-size=${INNODB_BUFFER_POOL_SIZE-2G}"
    networks:
      default:
        aliases:
          - "db"
    environment:
      MARIADB_ROOT_HOST: ${STARC_SQL_HOST-db}
      MARIADB_USER: ${STARC_SQL_USER-db}
      MARIADB_PASSWORD: ${STARC_SQL_PASSWORD-db}
      MARIADB_DATABASE: ${STARC_SQL_DATABASE-db}
      MARIADB_RANDOM_ROOT_PASSWORD: 1
      MARIADB_AUTO_UPGRADE: ${MARIADB_AUTO_UPGRADE-0}
      MARIADB_DISABLE_UPGRADE_BACKUP: ${MARIADB_DISABLE_UPGRADE_BACKUP-1}
    volumes:
      - type: bind
        source: ${APP_DATA_DIR-.}/data/mysql
        target: /var/lib/mysql

  datahost:
    <<: [ *service_build, *restart_policy, *service_volumes ]
    command: 'node out/src/bin/datahost.js'
    container_name: ${COMPOSE_PROJECT_NAME:??}-datahost
    environment:
      <<: *common_env
    expose:
      - 8089
    depends_on:
      redis: { condition: service_started }
      mariadb: { condition: service_started }

  dataproc:
    <<: [ *service_build, *restart_policy, *service_volumes ]
    command: 'node out/src/bin/dataproc.js'
    container_name: ${COMPOSE_PROJECT_NAME:??}-dataproc
    environment:
      <<: *common_env
    depends_on:
      redis: { condition: service_started }
      mariadb: { condition: service_started }

  webapi:
    <<: [ *service_build, *restart_policy, *service_volumes ]
    command: 'node out/src/bin/webapi.js'
    container_name: ${COMPOSE_PROJECT_NAME:??}-webapi
    environment:
      <<: *common_env
    expose:
      - 8090
    depends_on:
      redis: { condition: service_started }
      mariadb: { condition: service_started }

  drec:
    <<: [ *service_build, *restart_policy, *service_volumes ]
    command: 'node out/src/bin/drec.js'
    container_name: ${COMPOSE_PROJECT_NAME:??}-drec
    environment:
      <<: *common_env
    depends_on:
      redis: { condition: service_started }
      mariadb: { condition: service_started }

  dsbot:
    <<: [ *service_build, *restart_policy, *service_volumes ]
    command: 'node out/src/bin/dsbot.js'
    container_name: ${COMPOSE_PROJECT_NAME:??}-dsbot
    environment:
      <<: *common_env
    depends_on:
      redis: { condition: service_started }
      mariadb: { condition: service_started }

  btrack:
    <<: [ *service_build, *restart_policy, *service_volumes ]
    command: 'node out/src/bin/btrack.js'
    container_name: ${COMPOSE_PROJECT_NAME:??}-btrack
    environment:
      <<: *common_env
    depends_on:
      redis: { condition: service_started }
      mariadb: { condition: service_started }

  cron:
    <<: [ *service_build, *restart_policy, *service_volumes ]
    init: true
    command: ['supercronic', '/app/cron/node']
    container_name: ${COMPOSE_PROJECT_NAME:??}-cron
    environment:
      <<: *common_env
    depends_on:
      redis: { condition: service_started }
      mariadb: { condition: service_started }

networks:
  default:
    name: ${COMPOSE_PROJECT_NAME:??}-internal
